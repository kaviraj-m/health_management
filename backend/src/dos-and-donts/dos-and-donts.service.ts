import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateDoAndDontDto, UpdateDoAndDontDto } from './dto/dos-and-donts.dto';

@Injectable()
export class DosAndDontsService {
  constructor(private readonly prisma: PrismaService) {}

  async create(patientId: number, createDoAndDontDto: CreateDoAndDontDto) {
    // Check if patient exists
    const patient = await this.prisma.patient.findUnique({
      where: { id: patientId },
    });

    if (!patient) {
      throw new NotFoundException(`Patient with ID ${patientId} not found`);
    }

    // Create dos and dont
    return this.prisma.dosAndDonts.create({
      data: {
        type: createDoAndDontDto.type,
        description: createDoAndDontDto.description,
        isAutoGenerated: createDoAndDontDto.isAutoGenerated || false,
        patientId,
      },
    });
  }

  async findAllForPatient(patientId: number) {
    // Check if patient exists
    const patient = await this.prisma.patient.findUnique({
      where: { id: patientId },
    });

    if (!patient) {
      throw new NotFoundException(`Patient with ID ${patientId} not found`);
    }

    return this.prisma.dosAndDonts.findMany({
      where: { patientId },
    });
  }

  async findOne(id: number) {
    const dosAndDont = await this.prisma.dosAndDonts.findUnique({
      where: { id },
      include: {
        patient: {
          include: {
            user: {
              include: {
                profile: true,
              },
            },
          },
        },
      },
    });

    if (!dosAndDont) {
      throw new NotFoundException(`Do and Don't with ID ${id} not found`);
    }

    // Remove sensitive information
    const { password, ...userWithoutPassword } = dosAndDont.patient.user;
    dosAndDont.patient.user = userWithoutPassword as any;

    return dosAndDont;
  }

  async update(id: number, updateDoAndDontDto: UpdateDoAndDontDto) {
    // Check if dos and dont exists
    const dosAndDont = await this.prisma.dosAndDonts.findUnique({
      where: { id },
    });

    if (!dosAndDont) {
      throw new NotFoundException(`Do and Don't with ID ${id} not found`);
    }

    // Update dos and dont
    return this.prisma.dosAndDonts.update({
      where: { id },
      data: updateDoAndDontDto,
    });
  }

  async remove(id: number) {
    // Check if dos and dont exists
    const dosAndDont = await this.prisma.dosAndDonts.findUnique({
      where: { id },
    });

    if (!dosAndDont) {
      throw new NotFoundException(`Do and Don't with ID ${id} not found`);
    }

    await this.prisma.dosAndDonts.delete({
      where: { id },
    });

    return { message: `Do and Don't with ID ${id} deleted successfully` };
  }
} 
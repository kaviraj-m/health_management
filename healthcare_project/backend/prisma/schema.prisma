// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  RESCHEDULED
  CANCELLED
  COMPLETED
}

enum AppointmentType {
  IN_PERSON
  VIRTUAL
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  role           Role
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profile        Profile?
  doctorProfile  Doctor?
  patientProfile Patient?
  sentMessages   Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hospital {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  city        String
  state       String?
  zipCode     String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  doctors     Doctor[]
  appointments Appointment[]
}

model Doctor {
  id            Int       @id @default(autoincrement())
  specialization String
  licenseNumber String    @unique
  hospitalId    Int
  hospital      Hospital  @relation(fields: [hospitalId], references: [id])
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  appointments  Appointment[]
}

model Patient {
  id                Int      @id @default(autoincrement())
  dateOfBirth       DateTime?
  gender            String?
  emergencyContact  String?
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  appointments      Appointment[]
  healthRecords     HealthRecord[]
  medicalConditions MedicalCondition[]
  medicationReminders MedicationReminder[]
  dosAndDonts       DosAndDonts[]
}

model MedicalCondition {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  diagnosedAt DateTime?
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HealthRecord {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  bloodPressure String?
  heartRate   Int?
  bloodGlucose Float?
  notes       String?
  patientId   Int
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MedicationReminder {
  id          Int       @id @default(autoincrement())
  medication  String
  dosage      String?
  frequency   String
  startDate   DateTime
  endDate     DateTime?
  time        DateTime[]
  patientId   Int
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Appointment {
  id              Int              @id @default(autoincrement())
  date            DateTime
  preferredTime   String?
  location        String?
  type            AppointmentType  @default(IN_PERSON)
  reason          String?
  status          AppointmentStatus @default(PENDING)
  patientId       Int
  patient         Patient          @relation(fields: [patientId], references: [id])
  doctorId        Int
  doctor          Doctor           @relation(fields: [doctorId], references: [id])
  hospitalId      Int
  hospital        Hospital         @relation(fields: [hospitalId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  senderId    Int
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  Int
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model DosAndDonts {
  id          Int       @id @default(autoincrement())
  type        String    // "DO" or "DONT"
  description String
  isAutoGenerated Boolean @default(false)
  patientId   Int
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
